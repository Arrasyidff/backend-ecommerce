version: '3.8'

services:
  web1:
    build:
      context: .
      dockerfile: docker/Dockerfile.prod
    container_name: backend-app-prod-1
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=mongodb://mongo:27017/mydatabase
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=90d
    depends_on:
      - mongo
    networks:
      - app-network

  web2:
    build:
      context: .
      dockerfile: docker/Dockerfile.prod
    container_name: backend-app-prod-2
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=mongodb://mongo:27017/mydatabase
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=90d
    depends_on:
      - mongo
    networks:
      - app-network

  web3:
    build:
      context: .
      dockerfile: docker/Dockerfile.prod
    container_name: backend-app-prod-3
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=mongodb://mongo:27017/mydatabase
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=90d
    depends_on:
      - mongo
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx-load-balancer-prod
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web1
      - web2
      - web3
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongodb-prod
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: mydatabase
    volumes:
      - mongo-data-prod:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network

volumes:
  mongo-data-prod:

networks:
  app-network:
    driver: bridge